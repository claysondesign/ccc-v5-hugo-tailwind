%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.14.1 (Build 18B75) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 132
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 132
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0.078431375 0.078431375 0.078431375 sc
q
0 0 132 132 rc
0 132 m
132 132 l
132 0 l
0 0 l
h
f
Q
1 1 1 sc
q
19.504963 43.104187 m
20.114479 43.104187 20.636509 43.023167 21.071072 42.861122 c
21.505632 42.699078 21.869644 42.46719 22.163115 42.165451 c
22.772629 41.573151 23.111244 40.774113 23.178968 39.768318 c
21.164192 39.366001 l
21.073893 39.935951 20.879189 40.394142 20.580076 40.740582 c
20.280962 41.087021 19.877445 41.260239 19.369516 41.260239 c
18.692278 41.260239 18.110989 40.94733 17.625635 40.321503 c
17.128992 39.650974 16.812952 38.695484 16.677504 37.455002 c
16.575918 36.236874 16.688789 35.289764 17.016123 34.613647 c
17.343454 33.937531 17.854198 33.599476 18.548368 33.599476 c
19.242538 33.599476 19.778679 33.786663 20.156803 34.161041 c
20.534929 34.535419 20.752207 35.00758 20.808643 35.57753 c
22.806488 35.57753 l
22.682327 34.348225 22.236485 33.401115 21.468948 32.736176 c
20.70141 32.071232 19.696854 31.738766 18.455248 31.738766 c
17.134632 31.738766 16.132896 32.241657 15.450014 33.247452 c
14.767132 34.253246 14.515992 35.655746 14.696589 37.455002 c
14.877187 39.254257 15.413326 40.656761 16.305025 41.662556 c
17.162861 42.62365 18.229496 43.104187 19.504963 43.104187 c
h
25.31226 42.886265 m
31.729069 42.886265 l
31.559761 41.126133 l
27.00535 41.126133 l
26.734455 38.326687 l
31.001041 38.326687 l
30.831732 36.549793 l
26.565147 36.549793 l
26.294252 33.750343 l
30.848663 33.750343 l
30.696285 31.97345 l
24.279476 31.97345 l
25.31226 42.886265 l
h
36.283482 42.886265 m
39.872829 35.242268 l
40.600857 42.886265 l
42.463257 42.886265 l
41.430473 31.97345 l
39.551144 31.97345 l
35.826347 39.885662 l
35.081387 31.97345 l
33.218987 31.97345 l
34.251774 42.886265 l
36.283482 42.886265 l
h
43.953175 42.886265 m
51.927628 42.886265 l
51.758316 41.126133 l
48.693825 41.126133 l
47.813419 31.97345 l
45.967953 31.97345 l
46.848358 41.126133 l
43.783867 41.126133 l
43.953175 42.886265 l
h
61.171894 43.104187 m
61.78141 43.104187 62.30344 43.023167 62.738003 42.861122 c
63.172565 42.699078 63.536575 42.46719 63.830044 42.165451 c
64.43956 41.573151 64.778175 40.774113 64.845901 39.768318 c
62.831123 39.366001 l
62.740822 39.935951 62.54612 40.394142 62.247005 40.740582 c
61.947891 41.087021 61.544376 41.260239 61.036446 41.260239 c
60.359207 41.260239 59.77792 40.94733 59.292564 40.321503 c
58.795925 39.650974 58.479881 38.695484 58.344437 37.455002 c
58.242851 36.236874 58.355721 35.289764 58.683052 34.613647 c
59.010384 33.937531 59.52113 33.599476 60.215298 33.599476 c
60.90947 33.599476 61.44561 33.786663 61.823734 34.161041 c
62.201859 34.535419 62.419136 35.00758 62.475574 35.57753 c
64.473419 35.57753 l
64.349258 34.348225 63.903416 33.401115 63.13588 32.736176 c
62.36834 32.071232 61.363785 31.738766 60.122181 31.738766 c
58.801563 31.738766 57.799828 32.241657 57.116947 33.247452 c
56.434063 34.253246 56.182922 35.655746 56.363522 37.455002 c
56.544117 39.254257 57.080257 40.656761 57.971954 41.662556 c
58.829792 42.62365 59.896427 43.104187 61.171894 43.104187 c
h
71.110329 43.104187 m
72.487381 43.104187 73.531441 42.629234 74.242546 41.679317 c
74.998795 40.695873 75.286621 39.282196 75.106018 37.43824 c
74.936714 35.583107 74.377998 34.152664 73.429863 33.14687 c
72.549454 32.20813 71.415092 31.738766 70.026749 31.738766 c
68.660988 31.738766 67.616928 32.219303 66.894539 33.180397 c
66.160858 34.163841 65.884323 35.583107 66.064926 37.43824 c
66.23423 39.293373 66.7873 40.718227 67.724152 41.712845 c
68.593277 42.640411 69.721992 43.104187 71.110329 43.104187 c
h
73.175896 37.421478 m
73.300056 38.65078 73.156151 39.600685 72.744164 40.271214 c
72.332176 40.941742 71.731133 41.277004 70.941017 41.277004 c
70.150909 41.277004 69.487785 40.93895 68.951637 40.262833 c
68.415489 39.586716 68.088165 38.634018 67.96965 37.404713 c
67.851135 36.175407 67.995041 35.231094 68.40139 34.571739 c
68.807732 33.912384 69.408768 33.582714 70.204529 33.582714 c
71.000282 33.582714 71.663406 33.91518 72.193909 34.58012 c
72.724411 35.245064 73.051735 36.192173 73.175896 37.421478 c
h
78.441406 33.750343 m
82.487892 33.750343 l
82.33551 31.97345 l
76.426628 31.97345 l
77.459412 42.886265 l
79.321815 42.886265 l
78.441406 33.750343 l
h
90.089859 39.835373 m
90.010849 40.78529 89.452133 41.260239 88.413704 41.260239 c
87.905777 41.260239 87.499435 41.148487 87.194679 40.924976 c
86.889923 40.701466 86.720612 40.430466 86.686752 40.111961 c
86.652893 39.793461 86.720612 39.547604 86.889923 39.374386 c
87.059235 39.201164 87.330124 39.036327 87.702606 38.879871 c
89.785103 37.941135 l
90.496208 37.617046 91.02388 37.217525 91.368141 36.742569 c
91.71241 36.267609 91.850677 35.672523 91.782951 34.957291 c
91.69265 33.951496 91.28067 33.163635 90.546997 32.593685 c
89.813324 32.023735 88.820053 31.738766 87.567162 31.738766 c
86.460999 31.738766 85.591888 32.034912 84.959801 32.627213 c
84.248703 33.297745 83.938301 34.219707 84.028603 35.393135 c
85.874069 35.393135 l
85.817635 34.778481 85.972832 34.328674 86.339668 34.043701 c
86.706505 33.758724 87.166458 33.616238 87.719536 33.616238 c
88.272614 33.616238 88.732567 33.727993 89.099403 33.951504 c
89.46624 34.175014 89.669411 34.476746 89.708916 34.856712 c
89.748421 35.236679 89.683525 35.524445 89.514214 35.720016 c
89.344902 35.915588 89.057083 36.102776 88.650734 36.281582 c
86.737549 37.153267 l
85.992584 37.477356 85.439514 37.860111 85.078316 38.30154 c
84.717125 38.742973 84.570389 39.349236 84.638115 40.120346 c
84.728416 41.014385 85.123466 41.729607 85.82328 42.266029 c
86.534378 42.824802 87.454277 43.104187 88.583015 43.104187 c
89.711746 43.104187 90.552635 42.816422 91.105713 42.240883 c
91.658791 41.665348 91.929688 40.863518 91.918396 39.835373 c
90.089859 39.835373 l
h
19.504963 29.419977 m
20.114479 29.419977 20.636509 29.338955 21.071072 29.17691 c
21.505632 29.014866 21.869644 28.782978 22.163115 28.481239 c
22.772629 27.888939 23.111244 27.089903 23.178968 26.084108 c
21.164192 25.681791 l
21.073893 26.251743 20.879189 26.70993 20.580076 27.056372 c
20.280962 27.402811 19.877445 27.576029 19.369516 27.576029 c
18.692278 27.576029 18.110989 27.263121 17.625635 26.637293 c
17.128992 25.966763 16.812952 25.011272 16.677504 23.770792 c
16.575918 22.552664 16.688789 21.605555 17.016123 20.929438 c
17.343454 20.253319 17.854198 19.915266 18.548368 19.915266 c
19.242538 19.915266 19.778679 20.102453 20.156803 20.476831 c
20.534929 20.851212 20.752207 21.323368 20.808643 21.893318 c
22.806488 21.893318 l
22.682327 20.664015 22.236485 19.716906 21.468948 19.051964 c
20.70141 18.387022 19.696854 18.054556 18.455248 18.054556 c
17.134632 18.054556 16.132896 18.557446 15.450014 19.56324 c
14.767132 20.569035 14.515992 21.971537 14.696589 23.770792 c
14.877187 25.570047 15.413326 26.972549 16.305025 27.978344 c
17.162861 28.939438 18.229496 29.419977 19.504963 29.419977 c
h
27.191589 29.202055 m
26.751387 24.676003 l
31.034903 24.676003 l
31.475105 29.202055 l
33.320572 29.202055 l
32.287788 18.28924 l
30.42539 18.28924 l
30.848663 22.882345 l
26.582077 22.882345 l
26.158806 18.28924 l
24.296408 18.28924 l
25.329191 29.202055 l
27.191589 29.202055 l
h
38.433704 29.202055 m
40.770168 29.202055 l
42.988113 18.28924 l
41.007198 18.28924 l
40.550064 20.602556 l
36.892994 20.602556 l
35.978725 18.28924 l
34.03167 18.28924 l
38.433704 29.202055 l
h
37.519436 22.144766 m
40.245308 22.144766 l
39.331039 26.78816 l
37.519436 22.144766 l
h
46.729843 20.066133 m
50.776325 20.066133 l
50.623947 18.28924 l
44.715065 18.28924 l
45.747849 29.202055 l
47.610249 29.202055 l
46.729843 20.066133 l
h
54.297951 20.066133 m
58.344437 20.066133 l
58.192059 18.28924 l
52.283176 18.28924 l
53.31596 29.202055 l
55.178356 29.202055 l
54.297951 20.066133 l
h
60.867138 29.202055 m
67.283951 29.202055 l
67.114639 27.441923 l
62.560226 27.441923 l
62.289333 24.642477 l
66.555916 24.642477 l
66.386612 22.865582 l
62.120026 22.865582 l
61.849129 20.066133 l
66.403542 20.066133 l
66.25116 18.28924 l
59.834354 18.28924 l
60.867138 29.202055 l
h
71.838356 29.202055 m
75.427704 21.558056 l
76.155739 29.202055 l
78.018135 29.202055 l
76.985352 18.28924 l
75.106018 18.28924 l
71.381226 26.20145 l
70.636261 18.28924 l
68.773865 18.28924 l
69.806648 29.202055 l
71.838356 29.202055 l
h
86.248947 20.030519 m
85.706001 18.713203 84.830452 18.054556 83.622261 18.054556 c
82.36937 18.054556 81.393028 18.568621 80.693214 19.596766 c
79.959541 20.680788 79.671715 22.044178 79.829742 23.686975 c
80.010338 25.430353 80.591629 26.827269 81.573624 27.877766 c
82.521759 28.90591 83.68998 29.419977 85.078316 29.419977 c
86.026451 29.419977 86.793976 29.19647 87.38092 28.749451 c
87.967857 28.302431 88.385483 27.58721 88.633804 26.603765 c
86.686752 26.134398 l
86.269119 27.09549 85.637039 27.576029 84.790489 27.576029 c
84.045532 27.576029 83.396515 27.229593 82.843437 26.536713 c
82.2565 25.776779 81.917885 24.826878 81.827583 23.686975 c
81.714714 22.558252 81.852982 21.650255 82.242393 20.962963 c
82.631805 20.275671 83.170769 19.93203 83.859291 19.93203 c
84.547821 19.93203 85.117821 20.14436 85.569313 20.569029 c
86.020805 20.993698 86.302986 21.591578 86.415855 22.362686 c
86.415855 22.395519 86.421272 22.422993 86.432098 22.445107 c
86.432556 22.484707 86.432793 22.524286 86.432793 22.563845 c
84.231773 22.614134 l
84.350288 23.921661 l
88.329048 23.921661 l
87.804192 18.28924 l
86.29734 18.28924 l
86.286057 18.579802 86.280411 18.875948 86.280411 19.177687 c
86.280411 19.412054 86.277008 19.643049 86.270195 19.870672 c
86.262383 19.851912 86.254501 19.83325 86.246552 19.814688 c
86.246552 19.886415 86.247345 19.958359 86.248947 20.030519 c
h
91.156509 29.202055 m
97.573318 29.202055 l
97.404007 27.441923 l
92.849594 27.441923 l
92.578705 24.642477 l
96.845291 24.642477 l
96.67598 22.865582 l
92.409393 22.865582 l
92.138504 20.066133 l
96.692909 20.066133 l
96.540535 18.28924 l
90.123726 18.28924 l
91.156509 29.202055 l
h
W*
13.948874 5.1860466 85.204872 38.260246 rc
9.6399317 48.104187 m
102.57332 48.104187 l
102.57332 13.054555 l
9.6399317 13.054555 l
h
f
Q
q
6 42.397835 m
13.383721 42.397835 l
30.872093 72.317108 l
20.302326 79.099449 l
6 42.397835 l
h
W*
6 42.666565 25.243782 36.552238 rc
1 84.099449 m
35.872093 84.099449 l
35.872093 37.397835 l
1 37.397835 l
h
f
Q
0.039215688 0.22745098 0.28627452 sc
q
44.064533 93.840439 m
31.116402 72.53569 l
43.293106 65.022057 l
57.790028 81.136093 l
44.064533 93.840439 l
h
W*
30.950249 64.774773 26.711443 29.182837 rc
26.116402 98.840439 m
62.790028 98.840439 l
62.790028 60.022053 l
26.116402 60.022053 l
h
f
Q
0.69411767 0.20784314 0.054901961 sc
q
93.353355 121.37179 m
57.503929 80.904259 l
98.314896 42.549316 l
124.24124 42.549316 l
93.353355 121.37179 l
h
W*
57.36816 42.666565 66.538818 78.705223 rc
52.503929 126.37179 m
129.24124 126.37179 l
129.24124 37.549316 l
52.503929 37.549316 l
h
f
ep
end
%%Trailer
%%EOF
